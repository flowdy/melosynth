#!/usr/bin/env python3
import script_preamble
from Sompyler.orchestra import play, NoteRenderingFailure
from Sompyler.synthesizer import normalize_amplitude
from Sompyler import synthesizer
import soundfile
import argparse, sys, numpy, re
import pdb

def get_monitor(args):

    v = args.verbose
    q = args.quiet

    _msgtypes = {
            'NEWNOTE': ( 'New note {} @{}: {}', True ),
            'REUSENOTE': ( 'Reuse note {} @{}', True ),
            'REUSENOTE_FRUN': (
                'Reuse note {} from former run @{}: {}', True
            ),
            'REGNEWNOTES': ( 'Registering {} new notes ...', False ),
            'DELETEORPHANS': (
                'Deleting cache files of {} unused notes ...', False
            ),
            'ASSEMBLE': ( 'Assembling all samples to one ...', False ),
        }

    def monitor(msgtype, *args):
        fmt, verbose_only = _msgtypes[ msgtype ]
        display = v if verbose_only else not q
        if display:
            print( fmt.format(*args) )

    return monitor


def process(options):

    synthesizer.SAMPLING_RATE = options.samplerate
    synthesizer.BYTES_PER_CHANNEL = options.samplewidth

    subtype = options.format or 'PCM_' + str(8 * synthesizer.BYTES_PER_CHANNEL)

    try:
        samples, cache_dir = play(
            options.score_file, options.workers,
            get_monitor(options)
        )
    except NoteRenderingFailure as e:
        sys.stderr.write(e.orig_info() + "\n")
        raise

    normalize_amplitude(samples, options.volume)

    if re.search('.npy$', options.out_file.name):
        numpy.save(options.out_file, samples)
    else:
        soundfile.write(
            options.out_file, samples,
            synthesizer.SAMPLING_RATE, subtype
        )

    print("-------------------------------------------------------------"
          "Do you want to reuse samples in subsequent runs to save time?\n"
          "Just do not pass *.spls path as argument, but the cache directory"
          " instead:\n\t" + cache_dir
        )

    return 0

if __name__=='__main__':
    parser = argparse.ArgumentParser(
        description="Convert a Sompyler score, accompanied with "
                    "instrument specifications linked therein, to audio file"
    )
    parser.add_argument('score_file',
        help="File containing the Sompyler score in YAML syntax"
    )
    parser.add_argument('out_file',
        type=argparse.FileType('wb'),
        help="File to which the audio data is written"
    )
    parser.add_argument('--samplerate',
        default=synthesizer.SAMPLING_RATE,
        type=int,
        help="How much frames per second"
    )
    parser.add_argument('--samplewidth',
        default=2,
        choices=(1,2,3,4),
        help="How much bytes per frame to use"
    )
    parser.add_argument('--format',
        default=None,
        type=str,
        help="Subtype of output as is supported by libsnd for that filetype"
    )
    parser.add_argument('--volume',
        default=1,
        type=float,
        help="Maximal amplitude in the range of 0..1"
    )
    parser.add_argument('--workers', '--parallel',
        type=int,
        nargs='?',
        help="How many additional processes are used to render tones in parallel"
             " (0 = no parallelisation | default: as many the machine has cores)"
    )
    parser.add_argument('--verbose', '-v',
        default=False,
        action='store_true',
        help="Display calculated information to every note"
    )
    parser.add_argument('--quiet', '-q',
        default=False,
        action='store_true',
        help='Suppress cache directory hint at the end.'
    )
    args = parser.parse_args()

    if args.workers is not None:
        args.workers += 1

    exit(process(args))

